{"version":3,"file":"static/js/156.f05d42ff.chunk.js","mappings":"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","sources":["components/Blocks/Wedding/Gallery/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport {\r\n  TextInput,\r\n  CustomSelect,\r\n  ImgInput,\r\n  MultiImgInput,\r\n} from '../../../Input';\r\nimport { Card } from '../../../Card/Card';\r\nimport { getCurrentStyleOption, getStyleOptions } from '../../blockHelper';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  updateBlockData,\r\n  selectBlockById,\r\n  updateTemplate,\r\n} from '../../../../reducers/SiteReducer';\r\nimport type { RootState } from '../../../../reducers/store';\r\nimport * as icon from '../../../../icons';\r\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport styled from 'styled-components';\r\nimport { Width100, Label, Required, Guideline } from '../../../Input';\r\nimport { useAppDispatch, useAppSelector } from '../../../../reducers';\r\nimport axios from 'axios';\r\nimport { forEachTrailingCommentRange } from 'typescript';\r\n\r\nconst DateTitle = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst Calendar = styled(DatePicker)`\r\n  font-size: 16px;\r\n  line-height: 19px;\r\n  width: 100%;\r\n  height: 48px;\r\n  border: 1px solid #ececec;\r\n  box-sizing: border-box;\r\n  padding: 15px 19px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\r\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\r\n    selectBlockById(state, blockId)\r\n  );\r\n  const styleOptions = getStyleOptions(template);\r\n  const currentStyle = getCurrentStyleOption(template);\r\n  const dispatch = useAppDispatch();\r\n\r\n  //Input\r\n  const [style, setStyle] = useState(currentStyle);\r\n  const [body, setBody] = useState(data.body?.value);\r\n  const [header, setHeader] = useState(data.header?.value);\r\n\r\n  const imgHandler = async (data: any) => {\r\n    const formData = new FormData();\r\n    for (let i = 0; i < data.length; i++) {\r\n      formData.append('file', data[i]);\r\n    }\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    };\r\n    const result = await axios.post('/api/site/images', formData, config);\r\n\r\n    dispatch(\r\n      updateBlockData({\r\n        blockId: id,\r\n        field: 'images',\r\n        value: result.data,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Card\r\n        title='Gallery'\r\n        onRemove={onRemove}\r\n        icon={icon.Gallery}\r\n        isCardOpened={isCardOpened}\r\n        blockId={blockId}\r\n      >\r\n        <CustomSelect\r\n          title='스타일'\r\n          required\r\n          guideline='스타일를 선택해주세요.'\r\n          placeholder='원하는 선택지를 선택해주세요'\r\n          options={styleOptions}\r\n          onChange={(e: StyleData) => {\r\n            setStyle(e);\r\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\r\n          }}\r\n          value={style}\r\n        />\r\n        <TextInput\r\n          title='타이틀'\r\n          required\r\n          guideline='헤드라인에 표시될 내용을 입력하세요.'\r\n          value={header}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setHeader(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'header',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title='추가 문구'\r\n          required={false}\r\n          guideline='설명에 표시될 내용을 입력하세요'\r\n          value={body}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setBody(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'body',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n\r\n        <MultiImgInput\r\n          title='이미지'\r\n          guideline='사이트에 표시할 이미지를 업로드하세요'\r\n          onChange={imgHandler}\r\n        />\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingBlock;\r\n","import styled, { css } from 'styled-components';\r\nimport * as icon from '../../icons';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleCardState } from '../../reducers/SiteReducer';\r\n\r\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-radius: ${(props) =>\r\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\r\n  position: relative;\r\n  width: 100%;\r\n  height: 60px;\r\n  display: flex;\r\n  padding: 0px 24px;\r\n  box-sizing: border-box;\r\n  & * {\r\n    user-select: none;\r\n    user-drag: none;\r\n  }\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst CardBoby = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-top: none;\r\n  padding: 24px;\r\n  box-sizing: border-box;\r\n  border-radius: 0 0 12px 12px;\r\n  div:first-child {\r\n    margin-top: 0px;\r\n  }\r\n`;\r\n\r\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\r\n  width: 22px;\r\n  height: 22px;\r\n  margin: auto 0;\r\n  &:hover {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\r\n  }\r\n  &:active {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\r\n  }\r\n`;\r\n\r\nconst TitleBox = styled.div`\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  display: flex;\r\n  margin-left: 20px;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  margin: auto 0;\r\n  margin-left: 16px;\r\n  padding-top: 2px;\r\n`;\r\n\r\nconst TitleIcon = styled.img`\r\n  width: 24px;\r\n  height: 24px;\r\n  margin: auto 0;\r\n`;\r\nconst Trash = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 64px;\r\n  top: 9px;\r\n  transition: opacity 0.3s;\r\n  &:hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`;\r\nconst Down = styled.img<{ isOpened: boolean }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 22px;\r\n  top: 9px;\r\n  transition: transform 0.4s;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n  ${(props) =>\r\n    props.isOpened &&\r\n    css`\r\n      transform: rotate(180deg);\r\n    `}\r\n`;\r\n\r\ninterface Cardprops {\r\n  title: string;\r\n  children: any;\r\n  pinned?: boolean;\r\n  icon?: string;\r\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\r\n  isCardOpened?: boolean;\r\n  blockId?: string;\r\n}\r\n\r\nexport const Card = (props: Cardprops) => {\r\n  const dispatch = useDispatch();\r\n  const isCardOpened = props.isCardOpened ?? false;\r\n  return (\r\n    <CardContainer>\r\n      <CardHeader isOpened={isCardOpened}>\r\n        <HeaderIcon\r\n          pinned={props.pinned ? true : false}\r\n          src={props.pinned ? icon.Pin : icon.Movable}\r\n          alt=''\r\n        />\r\n        <TitleBox>\r\n          <TitleIcon src={props.icon} alt='' />\r\n          <Title>{props.title}</Title>\r\n        </TitleBox>\r\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\r\n        <Down\r\n          src={icon.Down}\r\n          alt=''\r\n          isOpened={isCardOpened}\r\n          onClick={() => {\r\n            dispatch(toggleCardState(props.blockId ?? ''));\r\n          }}\r\n        />\r\n      </CardHeader>\r\n      {isCardOpened && (\r\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\r\n      )}\r\n    </CardContainer>\r\n  );\r\n};\r\n"],"names":["styled","DatePicker","blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useAppDispatch","useState","style","setStyle","body","value","setBody","header","setHeader","imgHandler","formData","FormData","i","length","append","config","headers","axios","result","updateBlockData","field","title","icon","required","guideline","placeholder","options","onChange","e","updateTemplate","newTemplate","target","CardHeader","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","useDispatch","src","alt","onClick","toggleCardState","children"],"sourceRoot":""}