{"version":3,"file":"static/js/45.50b8a6c6.chunk.js","mappings":"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","sources":["components/Blocks/Resume/Skillset/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { TextInput, CustomSelect, ArrInput } from '../../../Input';\r\nimport { Card } from '../../../Card/Card';\r\nimport { getCurrentStyleOption, getStyleOptions } from '../../blockHelper';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  updateBlockData,\r\n  selectBlockById,\r\n  updateTemplate,\r\n} from '../../../../reducers/SiteReducer';\r\nimport type { RootState } from '../../../../reducers/store';\r\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\r\nimport styled from 'styled-components';\r\nimport * as icons from '../../../../icons';\r\n\r\nconst Skill = styled.div`\r\n  box-sizing: border-box;\r\n  padding: 5px 8px;\r\n  background-color: #f0f1f3;\r\n  margin: 0 4px;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 5px !important;\r\n`;\r\nconst Intro = styled.span`\r\n  font-size: 1rem;\r\n  color: black;\r\n  width: 80%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\nconst Del = styled.img`\r\n  width: 8px;\r\n  height: 8px;\r\n  padding: 3px;\r\n  margin-left: 2px;\r\n  cursor: pointer;\r\n`;\r\n\r\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\r\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\r\n    selectBlockById(state, blockId)\r\n  );\r\n  const styleOptions = getStyleOptions(template);\r\n  const currentStyle = getCurrentStyleOption(template);\r\n  const dispatch = useDispatch();\r\n\r\n  const [style, setStyle] = useState(currentStyle);\r\n  const [title, setTitle] = useState(data.title?.value);\r\n  const [navTitle, setNavTitle] = useState(data.navTitle);\r\n\r\n  const [intros, setIntros] = useState('');\r\n  const [arr, setArr] = useState(data.arrText?.value);\r\n\r\n  const skills = (data: Array<string> | undefined) => {\r\n    const arr = [];\r\n    if (!data) {\r\n      return;\r\n    }\r\n    for (let i = 0; i < data.length; i++) {\r\n      arr.push(\r\n        <Skill key={`${data}-${i}`}>\r\n          {data[i]}\r\n          <Del\r\n            src={icons.x}\r\n            onClick={() => {\r\n              setArr((res) => {\r\n                if (!res) {\r\n                  return;\r\n                }\r\n                const newarr = res.filter((value, index) => index !== i);\r\n                return [...newarr];\r\n              });\r\n            }}\r\n          />\r\n        </Skill>\r\n      );\r\n    }\r\n    return arr;\r\n  };\r\n  useEffect(() => {\r\n    dispatch(\r\n      updateBlockData({\r\n        blockId: id,\r\n        field: 'arrText',\r\n        value: { value: arr },\r\n      })\r\n    );\r\n  }, [arr, dispatch, id]);\r\n  return (\r\n    <>\r\n      <Card\r\n        title='Skillset'\r\n        onRemove={onRemove}\r\n        icon={icons.Skillset}\r\n        isCardOpened={isCardOpened}\r\n        blockId={blockId}\r\n      >\r\n        <TextInput\r\n          title='메뉴명'\r\n          required={false}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setNavTitle(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'navTitle',\r\n                value: e.target.value,\r\n              })\r\n            );\r\n          }}\r\n          guideline='네비게이션 바에 입력될 메뉴명을 입력하세요.'\r\n          value={navTitle}\r\n        ></TextInput>\r\n        <CustomSelect\r\n          title='스타일'\r\n          required={true}\r\n          guideline='스타일를 선택해주세요.'\r\n          placeholder='원하는 선택지를 선택해주세요'\r\n          options={styleOptions}\r\n          onChange={(e: StyleData) => {\r\n            setStyle(e);\r\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\r\n          }}\r\n          value={style}\r\n        />\r\n\r\n        <TextInput\r\n          title='타이틀'\r\n          required={true}\r\n          guideline='타이틀을 입력해주세요'\r\n          value={title}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setTitle(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'title',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <ArrInput\r\n          title='기술 스택'\r\n          required\r\n          guideline='기술 스택을 입력해주세요'\r\n          key={'skillset'}\r\n          value={intros}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setIntros(e.target.value);\r\n          }}\r\n          onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n            e.preventDefault();\r\n\r\n            setArr((res) => {\r\n              if (!res) {\r\n                return;\r\n              }\r\n              return [...res, intros];\r\n            });\r\n            setIntros(() => '');\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'arrText',\r\n                value: { value: arr },\r\n              })\r\n            );\r\n          }}\r\n          arr={<Intro>{skills(arr)}</Intro>}\r\n        ></ArrInput>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingBlock;\r\n","import styled, { css } from 'styled-components';\r\nimport * as icon from '../../icons';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleCardState } from '../../reducers/SiteReducer';\r\n\r\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-radius: ${(props) =>\r\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\r\n  position: relative;\r\n  width: 100%;\r\n  height: 60px;\r\n  display: flex;\r\n  padding: 0px 24px;\r\n  box-sizing: border-box;\r\n  & * {\r\n    user-select: none;\r\n    user-drag: none;\r\n  }\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst CardBoby = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-top: none;\r\n  padding: 24px;\r\n  box-sizing: border-box;\r\n  border-radius: 0 0 12px 12px;\r\n  div:first-child {\r\n    margin-top: 0px;\r\n  }\r\n`;\r\n\r\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\r\n  width: 22px;\r\n  height: 22px;\r\n  margin: auto 0;\r\n  &:hover {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\r\n  }\r\n  &:active {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\r\n  }\r\n`;\r\n\r\nconst TitleBox = styled.div`\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  display: flex;\r\n  margin-left: 20px;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  margin: auto 0;\r\n  margin-left: 16px;\r\n  padding-top: 2px;\r\n`;\r\n\r\nconst TitleIcon = styled.img`\r\n  width: 24px;\r\n  height: 24px;\r\n  margin: auto 0;\r\n`;\r\nconst Trash = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 64px;\r\n  top: 9px;\r\n  transition: opacity 0.3s;\r\n  &:hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`;\r\nconst Down = styled.img<{ isOpened: boolean }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 22px;\r\n  top: 9px;\r\n  transition: transform 0.4s;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n  ${(props) =>\r\n    props.isOpened &&\r\n    css`\r\n      transform: rotate(180deg);\r\n    `}\r\n`;\r\n\r\ninterface Cardprops {\r\n  title: string;\r\n  children: any;\r\n  pinned?: boolean;\r\n  icon?: string;\r\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\r\n  isCardOpened?: boolean;\r\n  blockId?: string;\r\n}\r\n\r\nexport const Card = (props: Cardprops) => {\r\n  const dispatch = useDispatch();\r\n  const isCardOpened = props.isCardOpened ?? false;\r\n  return (\r\n    <CardContainer>\r\n      <CardHeader isOpened={isCardOpened}>\r\n        <HeaderIcon\r\n          pinned={props.pinned ? true : false}\r\n          src={props.pinned ? icon.Pin : icon.Movable}\r\n          alt=''\r\n        />\r\n        <TitleBox>\r\n          <TitleIcon src={props.icon} alt='' />\r\n          <Title>{props.title}</Title>\r\n        </TitleBox>\r\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\r\n        <Down\r\n          src={icon.Down}\r\n          alt=''\r\n          isOpened={isCardOpened}\r\n          onClick={() => {\r\n            dispatch(toggleCardState(props.blockId ?? ''));\r\n          }}\r\n        />\r\n      </CardHeader>\r\n      {isCardOpened && (\r\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\r\n      )}\r\n    </CardContainer>\r\n  );\r\n};\r\n"],"names":["Skill","styled","Intro","Del","blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useDispatch","useState","style","setStyle","title","value","setTitle","navTitle","setNavTitle","intros","setIntros","arrText","arr","setArr","useEffect","updateBlockData","field","icon","icons","required","onChange","e","target","guideline","placeholder","options","updateTemplate","newTemplate","onClick","preventDefault","res","i","push","src","newarr","filter","index","length","skills","CardHeader","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","alt","toggleCardState","children"],"sourceRoot":""}