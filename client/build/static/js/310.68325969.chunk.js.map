{"version":3,"file":"static/js/310.68325969.chunk.js","mappings":"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","sources":["components/Blocks/Resume/Career/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { TextInput, CustomSelect, ArrInput } from '../../../Input';\r\nimport { Card } from '../../../Card/Card';\r\nimport { getStyleOptions, getCurrentStyleOption } from '../../blockHelper';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  updateBlockData,\r\n  selectBlockById,\r\n  updateTemplate,\r\n} from '../../../../reducers/SiteReducer';\r\nimport type { RootState } from '../../../../reducers/store';\r\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\r\nimport styled from 'styled-components';\r\nimport * as icons from '../../../../icons';\r\nconst Skill = styled.div`\r\n  box-sizing: border-box;\r\n  padding: 5px 8px;\r\n  background-color: #f0f1f3;\r\n  margin: 0 4px;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 5px !important;\r\n`;\r\nconst Intro = styled.span`\r\n  font-size: 1rem;\r\n  color: black;\r\n  width: 80%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\nconst Del = styled.img`\r\n  width: 8px;\r\n  height: 8px;\r\n  padding: 3px;\r\n  margin-left: 2px;\r\n  cursor: pointer;\r\n`;\r\n\r\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\r\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\r\n    selectBlockById(state, blockId)\r\n  );\r\n  const styleOptions = getStyleOptions(template);\r\n  const currentStyle = getCurrentStyleOption(template);\r\n  const dispatch = useDispatch();\r\n  const [style, setStyle] = useState(currentStyle);\r\n  const [title, setTitle] = useState(data.title?.value);\r\n  const [intros, setIntros] = useState('');\r\n  const [arr, setArr] = useState(data.arrText?.value);\r\n  const [projectTitle, setProjectTitle] = useState(data.leftText?.value);\r\n  const [term, setTerm] = useState(data.caption?.value);\r\n  const [role, setRole] = useState(data.rightText?.value);\r\n  const [body, setbody] = useState(data.body?.value);\r\n  const [projectUrl, setProjectUrl] = useState(data.button?.url);\r\n  const [navTitle, setNavTitle] = useState(data.navTitle);\r\n  const skills = (data: Array<string> | undefined) => {\r\n    const arr = [];\r\n    if (!data) {\r\n      return;\r\n    }\r\n    for (let i = 0; i < data.length; i++) {\r\n      arr.push(\r\n        <Skill key={`${data}-${i}`}>\r\n          {data[i]}\r\n          <Del\r\n            src={icons.x}\r\n            onClick={() => {\r\n              setArr((res) => {\r\n                if (!res) {\r\n                  return;\r\n                }\r\n                const newarr = res.filter((value, index) => index !== i);\r\n                dispatch(\r\n                  updateBlockData({\r\n                    blockId: id,\r\n                    field: 'arrText',\r\n                    value: { value: newarr },\r\n                  })\r\n                );\r\n                return [...newarr];\r\n              });\r\n            }}\r\n          />\r\n        </Skill>\r\n      );\r\n    }\r\n    return arr;\r\n  };\r\n  return (\r\n    <>\r\n      <Card\r\n        title='Career'\r\n        onRemove={onRemove}\r\n        icon={icons.Career}\r\n        isCardOpened={isCardOpened}\r\n        blockId={blockId}\r\n      >\r\n        <TextInput\r\n          title='메뉴명'\r\n          required={false}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setNavTitle(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'navTitle',\r\n                value: e.target.value,\r\n              })\r\n            );\r\n          }}\r\n          guideline='네비게이션 바에 입력될 메뉴명을 입력하세요.'\r\n          value={navTitle}\r\n        ></TextInput>\r\n        <CustomSelect\r\n          title='스타일'\r\n          required={true}\r\n          guideline='스타일를 선택해주세요.'\r\n          placeholder='원하는 선택지를 선택해주세요'\r\n          options={styleOptions}\r\n          onChange={(e: StyleData) => {\r\n            setStyle(e);\r\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\r\n          }}\r\n          value={style}\r\n        />\r\n        <TextInput\r\n          title='타이틀'\r\n          required={true}\r\n          guideline='텍스트를 입력해주세요'\r\n          value={title}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setTitle(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'title',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title='Career'\r\n          required={true}\r\n          guideline='텍스트를 입력해주세요'\r\n          value={projectTitle}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setProjectTitle(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'leftText',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title='담당 업무'\r\n          required={false}\r\n          guideline='텍스트를 입력해주세요'\r\n          value={role}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setRole(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'rightText',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title='기간'\r\n          required={false}\r\n          guideline='텍스트를 입력해주세요'\r\n          value={term}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setTerm(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'caption',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <ArrInput\r\n          title='적용 기술'\r\n          required={false}\r\n          guideline='기술 스택을 입력해주세요'\r\n          key={'skillset'}\r\n          value={intros}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setIntros(e.target.value);\r\n          }}\r\n          onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n            e.preventDefault();\r\n\r\n            setArr((res) => {\r\n              if (!res) {\r\n                return;\r\n              }\r\n              return [...res, intros];\r\n            });\r\n            setIntros(() => '');\r\n\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'arrText',\r\n                value: { value: arr },\r\n              })\r\n            );\r\n          }}\r\n          arr={<Intro>{skills(arr)}</Intro>}\r\n        ></ArrInput>\r\n        <TextInput\r\n          title='프로젝트 소개'\r\n          required={false}\r\n          guideline='텍스트를 입력해주세요'\r\n          value={body}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setbody(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'body',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title='url'\r\n          required={false}\r\n          guideline='텍스트를 입력해주세요'\r\n          value={projectUrl}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setProjectUrl(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'button',\r\n                value: { url: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingBlock;\r\n","import styled, { css } from 'styled-components';\r\nimport * as icon from '../../icons';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleCardState } from '../../reducers/SiteReducer';\r\n\r\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-radius: ${(props) =>\r\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\r\n  position: relative;\r\n  width: 100%;\r\n  height: 60px;\r\n  display: flex;\r\n  padding: 0px 24px;\r\n  box-sizing: border-box;\r\n  & * {\r\n    user-select: none;\r\n    user-drag: none;\r\n  }\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst CardBoby = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-top: none;\r\n  padding: 24px;\r\n  box-sizing: border-box;\r\n  border-radius: 0 0 12px 12px;\r\n  div:first-child {\r\n    margin-top: 0px;\r\n  }\r\n`;\r\n\r\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\r\n  width: 22px;\r\n  height: 22px;\r\n  margin: auto 0;\r\n  &:hover {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\r\n  }\r\n  &:active {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\r\n  }\r\n`;\r\n\r\nconst TitleBox = styled.div`\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  display: flex;\r\n  margin-left: 20px;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  margin: auto 0;\r\n  margin-left: 16px;\r\n  padding-top: 2px;\r\n`;\r\n\r\nconst TitleIcon = styled.img`\r\n  width: 24px;\r\n  height: 24px;\r\n  margin: auto 0;\r\n`;\r\nconst Trash = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 64px;\r\n  top: 9px;\r\n  transition: opacity 0.3s;\r\n  &:hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`;\r\nconst Down = styled.img<{ isOpened: boolean }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 22px;\r\n  top: 9px;\r\n  transition: transform 0.4s;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n  ${(props) =>\r\n    props.isOpened &&\r\n    css`\r\n      transform: rotate(180deg);\r\n    `}\r\n`;\r\n\r\ninterface Cardprops {\r\n  title: string;\r\n  children: any;\r\n  pinned?: boolean;\r\n  icon?: string;\r\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\r\n  isCardOpened?: boolean;\r\n  blockId?: string;\r\n}\r\n\r\nexport const Card = (props: Cardprops) => {\r\n  const dispatch = useDispatch();\r\n  const isCardOpened = props.isCardOpened ?? false;\r\n  return (\r\n    <CardContainer>\r\n      <CardHeader isOpened={isCardOpened}>\r\n        <HeaderIcon\r\n          pinned={props.pinned ? true : false}\r\n          src={props.pinned ? icon.Pin : icon.Movable}\r\n          alt=''\r\n        />\r\n        <TitleBox>\r\n          <TitleIcon src={props.icon} alt='' />\r\n          <Title>{props.title}</Title>\r\n        </TitleBox>\r\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\r\n        <Down\r\n          src={icon.Down}\r\n          alt=''\r\n          isOpened={isCardOpened}\r\n          onClick={() => {\r\n            dispatch(toggleCardState(props.blockId ?? ''));\r\n          }}\r\n        />\r\n      </CardHeader>\r\n      {isCardOpened && (\r\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\r\n      )}\r\n    </CardContainer>\r\n  );\r\n};\r\n"],"names":["Skill","styled","Intro","Del","blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useDispatch","useState","style","setStyle","title","value","setTitle","intros","setIntros","arrText","arr","setArr","leftText","projectTitle","setProjectTitle","caption","term","setTerm","rightText","role","setRole","body","setbody","button","url","projectUrl","setProjectUrl","navTitle","setNavTitle","icon","icons","required","onChange","e","target","updateBlockData","field","guideline","placeholder","options","updateTemplate","newTemplate","onClick","preventDefault","res","i","push","src","newarr","filter","index","length","skills","CardHeader","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","alt","toggleCardState","children"],"sourceRoot":""}