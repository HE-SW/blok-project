{"version":3,"file":"static/js/602.9649f8bb.chunk.js","mappings":"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","sources":["components/Blocks/Resume/Header/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { TextInput, CustomSelect } from '../../../Input';\r\nimport { Card } from '../../../Card/Card';\r\nimport { getStyleOptions, getCurrentStyleOption } from '../../blockHelper';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  updateBlockData,\r\n  selectBlockById,\r\n  updateTemplate,\r\n} from '../../../../reducers/SiteReducer';\r\nimport type { RootState } from '../../../../reducers/store';\r\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\r\nimport * as icons from '../../../../icons';\r\n\r\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\r\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\r\n    selectBlockById(state, blockId)\r\n  );\r\n  const styleOptions = getStyleOptions(template);\r\n  const currentStyle = getCurrentStyleOption(template);\r\n  const dispatch = useDispatch();\r\n\r\n  const [style, setStyle] = useState(currentStyle);\r\n  const [title, setTitle] = useState(data.title?.value);\r\n  const [rem, setRem] = useState(data.headerHighlight?.value);\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        title=\"Header\"\r\n        onRemove={onRemove}\r\n        icon={icons.Navbar}\r\n        isCardOpened={isCardOpened}\r\n        blockId={blockId}\r\n      >\r\n        <CustomSelect\r\n          title=\"스타일\"\r\n          required={true}\r\n          guideline=\"스타일를 선택해주세요.\"\r\n          placeholder=\"원하는 선택지를 선택해주세요\"\r\n          options={styleOptions}\r\n          onChange={(e: StyleData) => {\r\n            setStyle(e);\r\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\r\n          }}\r\n          value={style}\r\n        />\r\n        <TextInput\r\n          title=\"타이틀\"\r\n          required={true}\r\n          guideline=\"텍스트를 입력해주세요\"\r\n          value={title}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setTitle(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'title',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title=\"너비\"\r\n          required={true}\r\n          guideline=\"1~10 숫자를 입력해주세요.\"\r\n          type=\"number\"\r\n          value={rem}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            if (0 <= Number(e.target.value) && 10 >= Number(e.target.value)) {\r\n              setRem(e.target.value);\r\n              dispatch(\r\n                updateBlockData({\r\n                  blockId: id,\r\n                  field: 'number',\r\n                  value: { value: e.target.value },\r\n                })\r\n              );\r\n            }\r\n          }}\r\n        ></TextInput>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingBlock;\r\n","import styled, { css } from 'styled-components';\r\nimport * as icon from '../../icons';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleCardState } from '../../reducers/SiteReducer';\r\n\r\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-radius: ${(props) =>\r\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\r\n  position: relative;\r\n  width: 100%;\r\n  height: 60px;\r\n  display: flex;\r\n  padding: 0px 24px;\r\n  box-sizing: border-box;\r\n  & * {\r\n    user-select: none;\r\n    user-drag: none;\r\n  }\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst CardBoby = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-top: none;\r\n  padding: 24px;\r\n  box-sizing: border-box;\r\n  border-radius: 0 0 12px 12px;\r\n  div:first-child {\r\n    margin-top: 0px;\r\n  }\r\n`;\r\n\r\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\r\n  width: 22px;\r\n  height: 22px;\r\n  margin: auto 0;\r\n  &:hover {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\r\n  }\r\n  &:active {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\r\n  }\r\n`;\r\n\r\nconst TitleBox = styled.div`\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  display: flex;\r\n  margin-left: 20px;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  margin: auto 0;\r\n  margin-left: 16px;\r\n  padding-top: 2px;\r\n`;\r\n\r\nconst TitleIcon = styled.img`\r\n  width: 24px;\r\n  height: 24px;\r\n  margin: auto 0;\r\n`;\r\nconst Trash = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 64px;\r\n  top: 9px;\r\n  transition: opacity 0.3s;\r\n  &:hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`;\r\nconst Down = styled.img<{ isOpened: boolean }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 22px;\r\n  top: 9px;\r\n  transition: transform 0.4s;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n  ${(props) =>\r\n    props.isOpened &&\r\n    css`\r\n      transform: rotate(180deg);\r\n    `}\r\n`;\r\n\r\ninterface Cardprops {\r\n  title: string;\r\n  children: any;\r\n  pinned?: boolean;\r\n  icon?: string;\r\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\r\n  isCardOpened?: boolean;\r\n  blockId?: string;\r\n}\r\n\r\nexport const Card = (props: Cardprops) => {\r\n  const dispatch = useDispatch();\r\n  const isCardOpened = props.isCardOpened ?? false;\r\n  return (\r\n    <CardContainer>\r\n      <CardHeader isOpened={isCardOpened}>\r\n        <HeaderIcon\r\n          pinned={props.pinned ? true : false}\r\n          src={props.pinned ? icon.Pin : icon.Movable}\r\n          alt=''\r\n        />\r\n        <TitleBox>\r\n          <TitleIcon src={props.icon} alt='' />\r\n          <Title>{props.title}</Title>\r\n        </TitleBox>\r\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\r\n        <Down\r\n          src={icon.Down}\r\n          alt=''\r\n          isOpened={isCardOpened}\r\n          onClick={() => {\r\n            dispatch(toggleCardState(props.blockId ?? ''));\r\n          }}\r\n        />\r\n      </CardHeader>\r\n      {isCardOpened && (\r\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\r\n      )}\r\n    </CardContainer>\r\n  );\r\n};\r\n"],"names":["blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useDispatch","useState","style","setStyle","title","value","setTitle","headerHighlight","rem","setRem","icon","icons","required","guideline","placeholder","options","onChange","e","updateTemplate","newTemplate","target","updateBlockData","field","type","Number","CardHeader","styled","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","src","alt","onClick","toggleCardState","children"],"sourceRoot":""}