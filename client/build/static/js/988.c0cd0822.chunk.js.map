{"version":3,"file":"static/js/988.c0cd0822.chunk.js","mappings":"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","sources":["components/Blocks/Simple/Feature/Text/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { TextInput, CustomSelect } from '../../../../Input';\r\nimport { Card } from '../../../../Card/Card';\r\nimport { getStyleOptions, getCurrentStyleOption } from '../../../blockHelper';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  updateBlockData,\r\n  selectBlockById,\r\n  updateTemplate,\r\n} from '../../../../../reducers/SiteReducer';\r\nimport type { RootState } from '../../../../../reducers/store';\r\nimport * as icon from '../../../../../icons';\r\nimport { SettingBlockProps, StyleData } from '../../../blockValidator';\r\n\r\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\r\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\r\n    selectBlockById(state, blockId)\r\n  );\r\n  let styleOptions = getStyleOptions(template);\r\n  let currentStyle = getCurrentStyleOption(template);\r\n  const dispatch = useDispatch();\r\n\r\n  //Input\r\n\r\n  const [navTitle, setNavTitle] = useState(data.navTitle);\r\n  const [style, setStyle] = useState(currentStyle);\r\n\r\n  const [caption, setCaption] = useState(data.caption?.value);\r\n  const [header, setHeader] = useState(data.header?.value);\r\n  const [headerHighlight, setHeaderHighlight] = useState(\r\n    data.headerHighlight?.value\r\n  );\r\n  const [body, setBody] = useState(data.body?.value);\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        title=\"Feature\"\r\n        onRemove={onRemove}\r\n        icon={icon.Feature}\r\n        isCardOpened={isCardOpened}\r\n        blockId={blockId}\r\n      >\r\n        <TextInput\r\n          title=\"메뉴명\"\r\n          required\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setNavTitle(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'navTitle',\r\n                value: e.target.value,\r\n              })\r\n            );\r\n          }}\r\n          guideline=\"네비게이션 바에 입력될 메뉴명을 입력하세요.\"\r\n          value={navTitle}\r\n        ></TextInput>\r\n        <CustomSelect\r\n          title=\"스타일\"\r\n          required\r\n          guideline=\"스타일를 선택해주세요.\"\r\n          placeholder=\"원하는 선택지를 선택해주세요\"\r\n          options={styleOptions}\r\n          onChange={(e: StyleData) => {\r\n            setStyle(e);\r\n            dispatch(\r\n              dispatch(updateTemplate({ blockId: id, newTemplate: e.value }))\r\n            );\r\n          }}\r\n          value={style}\r\n        />\r\n        <TextInput\r\n          title=\"캡션\"\r\n          required={false}\r\n          guideline=\"캡션에 표시될 내용을 입력하세요.\"\r\n          value={caption}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setCaption(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'caption',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title=\"헤드라인\"\r\n          required\r\n          guideline=\"헤드라인에 표시될 내용을 입력하세요.\"\r\n          value={header}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setHeader(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'header',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title=\"헤드라인 강조 테스트\"\r\n          required={false}\r\n          guideline=\"헤드라인 내용 중에서 강조할 텍스트를 입력하세요\"\r\n          value={headerHighlight}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setHeaderHighlight(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'headerHighlight',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title=\"설명\"\r\n          required={false}\r\n          guideline=\"설명에 표시될 내용을 입력하세요\"\r\n          value={body}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setBody(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'body',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingBlock;\r\n","import styled, { css } from 'styled-components';\r\nimport * as icon from '../../icons';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleCardState } from '../../reducers/SiteReducer';\r\n\r\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-radius: ${(props) =>\r\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\r\n  position: relative;\r\n  width: 100%;\r\n  height: 60px;\r\n  display: flex;\r\n  padding: 0px 24px;\r\n  box-sizing: border-box;\r\n  & * {\r\n    user-select: none;\r\n    user-drag: none;\r\n  }\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst CardBoby = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-top: none;\r\n  padding: 24px;\r\n  box-sizing: border-box;\r\n  border-radius: 0 0 12px 12px;\r\n  div:first-child {\r\n    margin-top: 0px;\r\n  }\r\n`;\r\n\r\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\r\n  width: 22px;\r\n  height: 22px;\r\n  margin: auto 0;\r\n  &:hover {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\r\n  }\r\n  &:active {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\r\n  }\r\n`;\r\n\r\nconst TitleBox = styled.div`\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  display: flex;\r\n  margin-left: 20px;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  margin: auto 0;\r\n  margin-left: 16px;\r\n  padding-top: 2px;\r\n`;\r\n\r\nconst TitleIcon = styled.img`\r\n  width: 24px;\r\n  height: 24px;\r\n  margin: auto 0;\r\n`;\r\nconst Trash = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 64px;\r\n  top: 9px;\r\n  transition: opacity 0.3s;\r\n  &:hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`;\r\nconst Down = styled.img<{ isOpened: boolean }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 22px;\r\n  top: 9px;\r\n  transition: transform 0.4s;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n  ${(props) =>\r\n    props.isOpened &&\r\n    css`\r\n      transform: rotate(180deg);\r\n    `}\r\n`;\r\n\r\ninterface Cardprops {\r\n  title: string;\r\n  children: any;\r\n  pinned?: boolean;\r\n  icon?: string;\r\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\r\n  isCardOpened?: boolean;\r\n  blockId?: string;\r\n}\r\n\r\nexport const Card = (props: Cardprops) => {\r\n  const dispatch = useDispatch();\r\n  const isCardOpened = props.isCardOpened ?? false;\r\n  return (\r\n    <CardContainer>\r\n      <CardHeader isOpened={isCardOpened}>\r\n        <HeaderIcon\r\n          pinned={props.pinned ? true : false}\r\n          src={props.pinned ? icon.Pin : icon.Movable}\r\n          alt=''\r\n        />\r\n        <TitleBox>\r\n          <TitleIcon src={props.icon} alt='' />\r\n          <Title>{props.title}</Title>\r\n        </TitleBox>\r\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\r\n        <Down\r\n          src={icon.Down}\r\n          alt=''\r\n          isOpened={isCardOpened}\r\n          onClick={() => {\r\n            dispatch(toggleCardState(props.blockId ?? ''));\r\n          }}\r\n        />\r\n      </CardHeader>\r\n      {isCardOpened && (\r\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\r\n      )}\r\n    </CardContainer>\r\n  );\r\n};\r\n"],"names":["blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useDispatch","useState","navTitle","setNavTitle","style","setStyle","caption","value","setCaption","header","setHeader","headerHighlight","setHeaderHighlight","body","setBody","title","icon","required","onChange","e","target","updateBlockData","field","guideline","placeholder","options","updateTemplate","newTemplate","CardHeader","styled","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","src","alt","onClick","toggleCardState","children"],"sourceRoot":""}