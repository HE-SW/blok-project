{"version":3,"file":"static/js/409.55ba61e7.chunk.js","mappings":"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","sources":["components/Blocks/Wedding/Main/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { TextInput, CustomSelect, ImgInput } from '../../../Input';\r\nimport { Card } from '../../../Card/Card';\r\nimport { getCurrentStyleOption, getStyleOptions } from '../../blockHelper';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  updateBlockData,\r\n  selectBlockById,\r\n  updateTemplate,\r\n} from '../../../../reducers/SiteReducer';\r\nimport type { RootState } from '../../../../reducers/store';\r\nimport * as icon from '../../../../icons';\r\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\r\nimport axios from 'axios';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport styled from 'styled-components';\r\nimport { Width100, Label, Required, Guideline } from '../../../Input';\r\n\r\nconst DateTitle = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const Calendar = styled(DatePicker)`\r\n  font-size: 16px;\r\n  line-height: 19px;\r\n  width: 100%;\r\n  height: 48px;\r\n  border: 1px solid #ececec;\r\n  box-sizing: border-box;\r\n  padding: 15px 19px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\r\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\r\n    selectBlockById(state, blockId)\r\n  );\r\n  const styleOptions = getStyleOptions(template);\r\n  const currentStyle = getCurrentStyleOption(template);\r\n  const dispatch = useDispatch();\r\n\r\n  //Input\r\n  const [style, setStyle] = useState(currentStyle);\r\n  const [venue, setVenue] = useState(data.venue?.value);\r\n  const [header, setHeader] = useState(data.header?.value);\r\n  const [body, setBody] = useState(data.body?.value);\r\n  const [groomParent, setGroomParent] = useState(data.groomParent?.value);\r\n  const [brideParent, setBrideParent] = useState(data.brideParent?.value);\r\n  const [image, setImage] = useState(data.image);\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const imgHandler = async (data: any) => {\r\n    const formData = new FormData();\r\n    formData.append('file', data);\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    };\r\n    const result = await axios.post('/api/site/image', formData, config);\r\n\r\n    setImage(result.data);\r\n    dispatch(\r\n      updateBlockData({\r\n        blockId: id,\r\n        field: 'image',\r\n        value: {\r\n          src: result.data,\r\n          alt: result.data,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        title='Main'\r\n        pinned\r\n        onRemove={onRemove}\r\n        icon={icon.Home}\r\n        isCardOpened={isCardOpened}\r\n        blockId={blockId}\r\n      >\r\n        <CustomSelect\r\n          title='스타일'\r\n          required\r\n          guideline='스타일를 선택해주세요.'\r\n          placeholder='원하는 선택지를 선택해주세요'\r\n          options={styleOptions}\r\n          onChange={(e: StyleData) => {\r\n            setStyle(e);\r\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\r\n          }}\r\n          value={style}\r\n        />\r\n        <TextInput\r\n          title='신랑/신부 이름'\r\n          required\r\n          guideline='헤드라인에 표시될 내용을 입력하세요.'\r\n          value={header}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setHeader(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'header',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title='추가 문구'\r\n          required={false}\r\n          guideline='설명에 표시될 내용을 입력하세요'\r\n          value={body}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setBody(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'body',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <ImgInput\r\n          title='이미지'\r\n          guideline='사이트에 표시할 이미지를 업로드하세요'\r\n          src={image?.src}\r\n          alt={image?.alt}\r\n          placeholder={image?.src}\r\n          onChange={imgHandler}\r\n        />\r\n        <Width100>\r\n          <DateTitle>\r\n            <Label>결혼 날짜</Label>\r\n            <Required>*</Required>\r\n          </DateTitle>\r\n          <Calendar\r\n            selected={date}\r\n            onChange={(e: Date) => {\r\n              setDate(e);\r\n              dispatch(\r\n                updateBlockData({\r\n                  blockId: id,\r\n                  field: 'date',\r\n                  value: { value: e.toString() },\r\n                })\r\n              );\r\n            }}\r\n            showTimeSelect\r\n            timeFormat='HH:mm'\r\n            timeIntervals={15}\r\n            timeCaption='time'\r\n            dateFormat='MMMM d, yyyy h:mm aa'\r\n          />\r\n          <Guideline>결혼 날짜를 선택해주세요</Guideline>\r\n        </Width100>\r\n        <TextInput\r\n          title='결혼 장소'\r\n          required\r\n          guideline='결혼식 장소를 입력해주세요'\r\n          value={venue}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setVenue(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'venue',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title='신랑 아버지/어머니 성함'\r\n          guideline='부모님 이름을 입력해주세요'\r\n          value={groomParent}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setGroomParent(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'groomParent',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n        <TextInput\r\n          title='신부 아버지/어머니 성함'\r\n          guideline='부모님 이름을 입력해주세요'\r\n          value={brideParent}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            setBrideParent(e.target.value);\r\n            dispatch(\r\n              updateBlockData({\r\n                blockId: id,\r\n                field: 'brideParent',\r\n                value: { value: e.target.value },\r\n              })\r\n            );\r\n          }}\r\n        ></TextInput>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingBlock;\r\n","import styled, { css } from 'styled-components';\r\nimport * as icon from '../../icons';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleCardState } from '../../reducers/SiteReducer';\r\n\r\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-radius: ${(props) =>\r\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\r\n  position: relative;\r\n  width: 100%;\r\n  height: 60px;\r\n  display: flex;\r\n  padding: 0px 24px;\r\n  box-sizing: border-box;\r\n  & * {\r\n    user-select: none;\r\n    user-drag: none;\r\n  }\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst CardBoby = styled.div<{ isOpened: boolean }>`\r\n  background: #ffffff;\r\n  border: 1px solid #efefef;\r\n  border-top: none;\r\n  padding: 24px;\r\n  box-sizing: border-box;\r\n  border-radius: 0 0 12px 12px;\r\n  div:first-child {\r\n    margin-top: 0px;\r\n  }\r\n`;\r\n\r\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\r\n  width: 22px;\r\n  height: 22px;\r\n  margin: auto 0;\r\n  &:hover {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\r\n  }\r\n  &:active {\r\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\r\n  }\r\n`;\r\n\r\nconst TitleBox = styled.div`\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  display: flex;\r\n  margin-left: 20px;\r\n`;\r\n\r\nconst Title = styled.span`\r\n  margin: auto 0;\r\n  margin-left: 16px;\r\n  padding-top: 2px;\r\n`;\r\n\r\nconst TitleIcon = styled.img`\r\n  width: 24px;\r\n  height: 24px;\r\n  margin: auto 0;\r\n`;\r\nconst Trash = styled.img`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 64px;\r\n  top: 9px;\r\n  transition: opacity 0.3s;\r\n  &:hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`;\r\nconst Down = styled.img<{ isOpened: boolean }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  padding: 10px;\r\n  right: 22px;\r\n  top: 9px;\r\n  transition: transform 0.4s;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n  ${(props) =>\r\n    props.isOpened &&\r\n    css`\r\n      transform: rotate(180deg);\r\n    `}\r\n`;\r\n\r\ninterface Cardprops {\r\n  title: string;\r\n  children: any;\r\n  pinned?: boolean;\r\n  icon?: string;\r\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\r\n  isCardOpened?: boolean;\r\n  blockId?: string;\r\n}\r\n\r\nexport const Card = (props: Cardprops) => {\r\n  const dispatch = useDispatch();\r\n  const isCardOpened = props.isCardOpened ?? false;\r\n  return (\r\n    <CardContainer>\r\n      <CardHeader isOpened={isCardOpened}>\r\n        <HeaderIcon\r\n          pinned={props.pinned ? true : false}\r\n          src={props.pinned ? icon.Pin : icon.Movable}\r\n          alt=''\r\n        />\r\n        <TitleBox>\r\n          <TitleIcon src={props.icon} alt='' />\r\n          <Title>{props.title}</Title>\r\n        </TitleBox>\r\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\r\n        <Down\r\n          src={icon.Down}\r\n          alt=''\r\n          isOpened={isCardOpened}\r\n          onClick={() => {\r\n            dispatch(toggleCardState(props.blockId ?? ''));\r\n          }}\r\n        />\r\n      </CardHeader>\r\n      {isCardOpened && (\r\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\r\n      )}\r\n    </CardContainer>\r\n  );\r\n};\r\n"],"names":["DateTitle","styled","Calendar","DatePicker","blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useDispatch","useState","style","setStyle","venue","value","setVenue","header","setHeader","body","setBody","groomParent","setGroomParent","brideParent","setBrideParent","image","setImage","Date","date","setDate","imgHandler","formData","FormData","append","config","headers","axios","result","updateBlockData","field","src","alt","title","pinned","icon","required","guideline","placeholder","options","onChange","e","updateTemplate","newTemplate","target","selected","toString","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","CardHeader","props","isOpened","CardContainer","CardBoby","HeaderIcon","TitleBox","Title","TitleIcon","Trash","Down","css","Card","onClick","toggleCardState","children"],"sourceRoot":""}